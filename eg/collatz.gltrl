# ASPIRATIONAL

:=λ modulo |a ^int n ^int| → ^int
   (:= quotient (÷ a n))
   (− a (⋅ quotient n))

:=λ collatz_advance |n ^int| → ^int
   if (= (modulo n 2) 0)—
      (÷ n 2)
      (+ (⋅ 3 n) 1)

:=λ collatz_from_n |n ^int| → Void
   := result n
   (print result)
   while (≠ result 1)—
      := result (collatz_advance result)
      (print " ")
      (print result)
   (println "")

for |i (range 1 21)|—
   (collatz_from_n i)

# Expected output—
# 1
# 2 1
# 3 10 5 16 8 4 2 1
# 4 2 1
# 5 16 8 4 2 1
# 6 3 10 5 16 8 4 2 1
# 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1
# 8 4 2 1
# 9 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1
# 10 5 16 8 4 2 1
# 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1
# 12 6 3 10 5 16 8 4 2 1
# 13 40 20 10 5 16 8 4 2 1
# 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1
# 15 46 23 70 35 106 53 160 80 40 20 10 5 16 8 4 2 1
# 16 8 4 2 1
# 17 52 26 13 40 20 10 5 16 8 4 2 1
# 18 9 28 14 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1
# 19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1
# 20 10 5 16 8 4 2 1
